<?php
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_token_info()
 * @return array
 */
function custom_image_token_token_info() {
    $type = array(
        'name' => t('Custom'),
        'description' => t('Custom Tokens'),
    );

    $node['custom_image_token'] = array(
        'name' => t("customimagetoken"),
        'description' => t("Custom image token.")
    );

    return array(
        'types' => array('customtoken' => $type),
        'tokens' => array('customtoken' => $node)
    );
}

/**
 * Implements hook_tokens()
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
 * @return array
 */
function custom_image_token_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
    $url_final = '';
    $replacements = array();
    if ($type == 'customtoken' && !empty($data['node'])) {
        $node = $data['node'];
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'custom_image_token':
                    if($node->getType() == 'article'){
                        if(isset($node->get('field_image')->entity)){
                            $image_style = 'large';
                            $style = ImageStyle::load($image_style);
                            $url_final = $style->buildUrl($node->get('field_image')->entity->getFileUri());
                        }
                    }
                    $replacements[$original] = $url_final;
                    break;
            }
        }
    }
    return $replacements;
}
